
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Image` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Image
 * 
 */
export type ImageModel = runtime.Types.Result.DefaultSelection<Prisma.$ImagePayload>

export type AggregateImage = {
  _count: ImageCountAggregateOutputType | null
  _avg: ImageAvgAggregateOutputType | null
  _sum: ImageSumAggregateOutputType | null
  _min: ImageMinAggregateOutputType | null
  _max: ImageMaxAggregateOutputType | null
}

export type ImageAvgAggregateOutputType = {
  id: number | null
  productId: number | null
  bannerImageId: number | null
  categorySampleId: number | null
  brandId: number | null
}

export type ImageSumAggregateOutputType = {
  id: number | null
  productId: number | null
  bannerImageId: number | null
  categorySampleId: number | null
  brandId: number | null
}

export type ImageMinAggregateOutputType = {
  id: number | null
  productId: number | null
  bannerImageId: number | null
  categorySampleId: number | null
  publicId: string | null
  url: string | null
  createdAt: Date | null
  updatedAt: Date | null
  brandId: number | null
}

export type ImageMaxAggregateOutputType = {
  id: number | null
  productId: number | null
  bannerImageId: number | null
  categorySampleId: number | null
  publicId: string | null
  url: string | null
  createdAt: Date | null
  updatedAt: Date | null
  brandId: number | null
}

export type ImageCountAggregateOutputType = {
  id: number
  productId: number
  bannerImageId: number
  categorySampleId: number
  publicId: number
  url: number
  createdAt: number
  updatedAt: number
  brandId: number
  _all: number
}


export type ImageAvgAggregateInputType = {
  id?: true
  productId?: true
  bannerImageId?: true
  categorySampleId?: true
  brandId?: true
}

export type ImageSumAggregateInputType = {
  id?: true
  productId?: true
  bannerImageId?: true
  categorySampleId?: true
  brandId?: true
}

export type ImageMinAggregateInputType = {
  id?: true
  productId?: true
  bannerImageId?: true
  categorySampleId?: true
  publicId?: true
  url?: true
  createdAt?: true
  updatedAt?: true
  brandId?: true
}

export type ImageMaxAggregateInputType = {
  id?: true
  productId?: true
  bannerImageId?: true
  categorySampleId?: true
  publicId?: true
  url?: true
  createdAt?: true
  updatedAt?: true
  brandId?: true
}

export type ImageCountAggregateInputType = {
  id?: true
  productId?: true
  bannerImageId?: true
  categorySampleId?: true
  publicId?: true
  url?: true
  createdAt?: true
  updatedAt?: true
  brandId?: true
  _all?: true
}

export type ImageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Image to aggregate.
   */
  where?: Prisma.ImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Images to fetch.
   */
  orderBy?: Prisma.ImageOrderByWithRelationInput | Prisma.ImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Images from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Images.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Images
  **/
  _count?: true | ImageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ImageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ImageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ImageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ImageMaxAggregateInputType
}

export type GetImageAggregateType<T extends ImageAggregateArgs> = {
      [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateImage[P]>
    : Prisma.GetScalarType<T[P], AggregateImage[P]>
}




export type ImageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ImageWhereInput
  orderBy?: Prisma.ImageOrderByWithAggregationInput | Prisma.ImageOrderByWithAggregationInput[]
  by: Prisma.ImageScalarFieldEnum[] | Prisma.ImageScalarFieldEnum
  having?: Prisma.ImageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ImageCountAggregateInputType | true
  _avg?: ImageAvgAggregateInputType
  _sum?: ImageSumAggregateInputType
  _min?: ImageMinAggregateInputType
  _max?: ImageMaxAggregateInputType
}

export type ImageGroupByOutputType = {
  id: number
  productId: number | null
  bannerImageId: number | null
  categorySampleId: number | null
  publicId: string
  url: string
  createdAt: Date
  updatedAt: Date
  brandId: number | null
  _count: ImageCountAggregateOutputType | null
  _avg: ImageAvgAggregateOutputType | null
  _sum: ImageSumAggregateOutputType | null
  _min: ImageMinAggregateOutputType | null
  _max: ImageMaxAggregateOutputType | null
}

type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ImageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ImageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ImageGroupByOutputType[P]>
      }
    >
  >



export type ImageWhereInput = {
  AND?: Prisma.ImageWhereInput | Prisma.ImageWhereInput[]
  OR?: Prisma.ImageWhereInput[]
  NOT?: Prisma.ImageWhereInput | Prisma.ImageWhereInput[]
  id?: Prisma.IntFilter<"Image"> | number
  productId?: Prisma.IntNullableFilter<"Image"> | number | null
  bannerImageId?: Prisma.IntNullableFilter<"Image"> | number | null
  categorySampleId?: Prisma.IntNullableFilter<"Image"> | number | null
  publicId?: Prisma.StringFilter<"Image"> | string
  url?: Prisma.StringFilter<"Image"> | string
  createdAt?: Prisma.DateTimeFilter<"Image"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Image"> | Date | string
  brandId?: Prisma.IntNullableFilter<"Image"> | number | null
  product?: Prisma.XOR<Prisma.ProductNullableScalarRelationFilter, Prisma.ProductWhereInput> | null
  brandImage?: Prisma.XOR<Prisma.BrandNullableScalarRelationFilter, Prisma.BrandWhereInput> | null
  bannerImage?: Prisma.XOR<Prisma.BrandNullableScalarRelationFilter, Prisma.BrandWhereInput> | null
  brandLogoUrl?: Prisma.XOR<Prisma.BrandNullableScalarRelationFilter, Prisma.BrandWhereInput> | null
  category?: Prisma.XOR<Prisma.CollectionNullableScalarRelationFilter, Prisma.CollectionWhereInput> | null
  categorySample?: Prisma.XOR<Prisma.CollectionNullableScalarRelationFilter, Prisma.CollectionWhereInput> | null
}

export type ImageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrderInput | Prisma.SortOrder
  bannerImageId?: Prisma.SortOrderInput | Prisma.SortOrder
  categorySampleId?: Prisma.SortOrderInput | Prisma.SortOrder
  publicId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  brandId?: Prisma.SortOrderInput | Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
  brandImage?: Prisma.BrandOrderByWithRelationInput
  bannerImage?: Prisma.BrandOrderByWithRelationInput
  brandLogoUrl?: Prisma.BrandOrderByWithRelationInput
  category?: Prisma.CollectionOrderByWithRelationInput
  categorySample?: Prisma.CollectionOrderByWithRelationInput
}

export type ImageWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ImageWhereInput | Prisma.ImageWhereInput[]
  OR?: Prisma.ImageWhereInput[]
  NOT?: Prisma.ImageWhereInput | Prisma.ImageWhereInput[]
  productId?: Prisma.IntNullableFilter<"Image"> | number | null
  bannerImageId?: Prisma.IntNullableFilter<"Image"> | number | null
  categorySampleId?: Prisma.IntNullableFilter<"Image"> | number | null
  publicId?: Prisma.StringFilter<"Image"> | string
  url?: Prisma.StringFilter<"Image"> | string
  createdAt?: Prisma.DateTimeFilter<"Image"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Image"> | Date | string
  brandId?: Prisma.IntNullableFilter<"Image"> | number | null
  product?: Prisma.XOR<Prisma.ProductNullableScalarRelationFilter, Prisma.ProductWhereInput> | null
  brandImage?: Prisma.XOR<Prisma.BrandNullableScalarRelationFilter, Prisma.BrandWhereInput> | null
  bannerImage?: Prisma.XOR<Prisma.BrandNullableScalarRelationFilter, Prisma.BrandWhereInput> | null
  brandLogoUrl?: Prisma.XOR<Prisma.BrandNullableScalarRelationFilter, Prisma.BrandWhereInput> | null
  category?: Prisma.XOR<Prisma.CollectionNullableScalarRelationFilter, Prisma.CollectionWhereInput> | null
  categorySample?: Prisma.XOR<Prisma.CollectionNullableScalarRelationFilter, Prisma.CollectionWhereInput> | null
}, "id">

export type ImageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrderInput | Prisma.SortOrder
  bannerImageId?: Prisma.SortOrderInput | Prisma.SortOrder
  categorySampleId?: Prisma.SortOrderInput | Prisma.SortOrder
  publicId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  brandId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ImageCountOrderByAggregateInput
  _avg?: Prisma.ImageAvgOrderByAggregateInput
  _max?: Prisma.ImageMaxOrderByAggregateInput
  _min?: Prisma.ImageMinOrderByAggregateInput
  _sum?: Prisma.ImageSumOrderByAggregateInput
}

export type ImageScalarWhereWithAggregatesInput = {
  AND?: Prisma.ImageScalarWhereWithAggregatesInput | Prisma.ImageScalarWhereWithAggregatesInput[]
  OR?: Prisma.ImageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ImageScalarWhereWithAggregatesInput | Prisma.ImageScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Image"> | number
  productId?: Prisma.IntNullableWithAggregatesFilter<"Image"> | number | null
  bannerImageId?: Prisma.IntNullableWithAggregatesFilter<"Image"> | number | null
  categorySampleId?: Prisma.IntNullableWithAggregatesFilter<"Image"> | number | null
  publicId?: Prisma.StringWithAggregatesFilter<"Image"> | string
  url?: Prisma.StringWithAggregatesFilter<"Image"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Image"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Image"> | Date | string
  brandId?: Prisma.IntNullableWithAggregatesFilter<"Image"> | number | null
}

export type ImageCreateInput = {
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  product?: Prisma.ProductCreateNestedOneWithoutImagesInput
  brandImage?: Prisma.BrandCreateNestedOneWithoutBrandImageInput
  bannerImage?: Prisma.BrandCreateNestedOneWithoutBannerImageInput
  brandLogoUrl?: Prisma.BrandCreateNestedOneWithoutLogoImageInput
  category?: Prisma.CollectionCreateNestedOneWithoutBannerImageInput
  categorySample?: Prisma.CollectionCreateNestedOneWithoutSampleImagesInput
}

export type ImageUncheckedCreateInput = {
  id?: number
  productId?: number | null
  bannerImageId?: number | null
  categorySampleId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandId?: number | null
  brandLogoUrl?: Prisma.BrandUncheckedCreateNestedOneWithoutLogoImageInput
  category?: Prisma.CollectionUncheckedCreateNestedOneWithoutBannerImageInput
}

export type ImageUpdateInput = {
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneWithoutImagesNestedInput
  brandImage?: Prisma.BrandUpdateOneWithoutBrandImageNestedInput
  bannerImage?: Prisma.BrandUpdateOneWithoutBannerImageNestedInput
  brandLogoUrl?: Prisma.BrandUpdateOneWithoutLogoImageNestedInput
  category?: Prisma.CollectionUpdateOneWithoutBannerImageNestedInput
  categorySample?: Prisma.CollectionUpdateOneWithoutSampleImagesNestedInput
}

export type ImageUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bannerImageId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  categorySampleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  brandLogoUrl?: Prisma.BrandUncheckedUpdateOneWithoutLogoImageNestedInput
  category?: Prisma.CollectionUncheckedUpdateOneWithoutBannerImageNestedInput
}

export type ImageCreateManyInput = {
  id?: number
  productId?: number | null
  bannerImageId?: number | null
  categorySampleId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandId?: number | null
}

export type ImageUpdateManyMutationInput = {
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ImageUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bannerImageId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  categorySampleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ImageNullableScalarRelationFilter = {
  is?: Prisma.ImageWhereInput | null
  isNot?: Prisma.ImageWhereInput | null
}

export type ImageListRelationFilter = {
  every?: Prisma.ImageWhereInput
  some?: Prisma.ImageWhereInput
  none?: Prisma.ImageWhereInput
}

export type ImageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ImageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  bannerImageId?: Prisma.SortOrder
  categorySampleId?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  brandId?: Prisma.SortOrder
}

export type ImageAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  bannerImageId?: Prisma.SortOrder
  categorySampleId?: Prisma.SortOrder
  brandId?: Prisma.SortOrder
}

export type ImageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  bannerImageId?: Prisma.SortOrder
  categorySampleId?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  brandId?: Prisma.SortOrder
}

export type ImageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  bannerImageId?: Prisma.SortOrder
  categorySampleId?: Prisma.SortOrder
  publicId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  brandId?: Prisma.SortOrder
}

export type ImageSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  bannerImageId?: Prisma.SortOrder
  categorySampleId?: Prisma.SortOrder
  brandId?: Prisma.SortOrder
}

export type ImageCreateNestedOneWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutCategoryInput, Prisma.ImageUncheckedCreateWithoutCategoryInput>
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutCategoryInput
  connect?: Prisma.ImageWhereUniqueInput
}

export type ImageCreateNestedManyWithoutCategorySampleInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutCategorySampleInput, Prisma.ImageUncheckedCreateWithoutCategorySampleInput> | Prisma.ImageCreateWithoutCategorySampleInput[] | Prisma.ImageUncheckedCreateWithoutCategorySampleInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutCategorySampleInput | Prisma.ImageCreateOrConnectWithoutCategorySampleInput[]
  createMany?: Prisma.ImageCreateManyCategorySampleInputEnvelope
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
}

export type ImageUncheckedCreateNestedManyWithoutCategorySampleInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutCategorySampleInput, Prisma.ImageUncheckedCreateWithoutCategorySampleInput> | Prisma.ImageCreateWithoutCategorySampleInput[] | Prisma.ImageUncheckedCreateWithoutCategorySampleInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutCategorySampleInput | Prisma.ImageCreateOrConnectWithoutCategorySampleInput[]
  createMany?: Prisma.ImageCreateManyCategorySampleInputEnvelope
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
}

export type ImageUpdateOneWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutCategoryInput, Prisma.ImageUncheckedCreateWithoutCategoryInput>
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutCategoryInput
  upsert?: Prisma.ImageUpsertWithoutCategoryInput
  disconnect?: Prisma.ImageWhereInput | boolean
  delete?: Prisma.ImageWhereInput | boolean
  connect?: Prisma.ImageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ImageUpdateToOneWithWhereWithoutCategoryInput, Prisma.ImageUpdateWithoutCategoryInput>, Prisma.ImageUncheckedUpdateWithoutCategoryInput>
}

export type ImageUpdateManyWithoutCategorySampleNestedInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutCategorySampleInput, Prisma.ImageUncheckedCreateWithoutCategorySampleInput> | Prisma.ImageCreateWithoutCategorySampleInput[] | Prisma.ImageUncheckedCreateWithoutCategorySampleInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutCategorySampleInput | Prisma.ImageCreateOrConnectWithoutCategorySampleInput[]
  upsert?: Prisma.ImageUpsertWithWhereUniqueWithoutCategorySampleInput | Prisma.ImageUpsertWithWhereUniqueWithoutCategorySampleInput[]
  createMany?: Prisma.ImageCreateManyCategorySampleInputEnvelope
  set?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  disconnect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  delete?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  update?: Prisma.ImageUpdateWithWhereUniqueWithoutCategorySampleInput | Prisma.ImageUpdateWithWhereUniqueWithoutCategorySampleInput[]
  updateMany?: Prisma.ImageUpdateManyWithWhereWithoutCategorySampleInput | Prisma.ImageUpdateManyWithWhereWithoutCategorySampleInput[]
  deleteMany?: Prisma.ImageScalarWhereInput | Prisma.ImageScalarWhereInput[]
}

export type ImageUncheckedUpdateManyWithoutCategorySampleNestedInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutCategorySampleInput, Prisma.ImageUncheckedCreateWithoutCategorySampleInput> | Prisma.ImageCreateWithoutCategorySampleInput[] | Prisma.ImageUncheckedCreateWithoutCategorySampleInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutCategorySampleInput | Prisma.ImageCreateOrConnectWithoutCategorySampleInput[]
  upsert?: Prisma.ImageUpsertWithWhereUniqueWithoutCategorySampleInput | Prisma.ImageUpsertWithWhereUniqueWithoutCategorySampleInput[]
  createMany?: Prisma.ImageCreateManyCategorySampleInputEnvelope
  set?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  disconnect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  delete?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  update?: Prisma.ImageUpdateWithWhereUniqueWithoutCategorySampleInput | Prisma.ImageUpdateWithWhereUniqueWithoutCategorySampleInput[]
  updateMany?: Prisma.ImageUpdateManyWithWhereWithoutCategorySampleInput | Prisma.ImageUpdateManyWithWhereWithoutCategorySampleInput[]
  deleteMany?: Prisma.ImageScalarWhereInput | Prisma.ImageScalarWhereInput[]
}

export type ImageCreateNestedManyWithoutBannerImageInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutBannerImageInput, Prisma.ImageUncheckedCreateWithoutBannerImageInput> | Prisma.ImageCreateWithoutBannerImageInput[] | Prisma.ImageUncheckedCreateWithoutBannerImageInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutBannerImageInput | Prisma.ImageCreateOrConnectWithoutBannerImageInput[]
  createMany?: Prisma.ImageCreateManyBannerImageInputEnvelope
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
}

export type ImageCreateNestedManyWithoutBrandImageInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutBrandImageInput, Prisma.ImageUncheckedCreateWithoutBrandImageInput> | Prisma.ImageCreateWithoutBrandImageInput[] | Prisma.ImageUncheckedCreateWithoutBrandImageInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutBrandImageInput | Prisma.ImageCreateOrConnectWithoutBrandImageInput[]
  createMany?: Prisma.ImageCreateManyBrandImageInputEnvelope
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
}

export type ImageCreateNestedOneWithoutBrandLogoUrlInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutBrandLogoUrlInput, Prisma.ImageUncheckedCreateWithoutBrandLogoUrlInput>
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutBrandLogoUrlInput
  connect?: Prisma.ImageWhereUniqueInput
}

export type ImageUncheckedCreateNestedManyWithoutBannerImageInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutBannerImageInput, Prisma.ImageUncheckedCreateWithoutBannerImageInput> | Prisma.ImageCreateWithoutBannerImageInput[] | Prisma.ImageUncheckedCreateWithoutBannerImageInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutBannerImageInput | Prisma.ImageCreateOrConnectWithoutBannerImageInput[]
  createMany?: Prisma.ImageCreateManyBannerImageInputEnvelope
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
}

export type ImageUncheckedCreateNestedManyWithoutBrandImageInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutBrandImageInput, Prisma.ImageUncheckedCreateWithoutBrandImageInput> | Prisma.ImageCreateWithoutBrandImageInput[] | Prisma.ImageUncheckedCreateWithoutBrandImageInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutBrandImageInput | Prisma.ImageCreateOrConnectWithoutBrandImageInput[]
  createMany?: Prisma.ImageCreateManyBrandImageInputEnvelope
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
}

export type ImageUpdateManyWithoutBannerImageNestedInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutBannerImageInput, Prisma.ImageUncheckedCreateWithoutBannerImageInput> | Prisma.ImageCreateWithoutBannerImageInput[] | Prisma.ImageUncheckedCreateWithoutBannerImageInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutBannerImageInput | Prisma.ImageCreateOrConnectWithoutBannerImageInput[]
  upsert?: Prisma.ImageUpsertWithWhereUniqueWithoutBannerImageInput | Prisma.ImageUpsertWithWhereUniqueWithoutBannerImageInput[]
  createMany?: Prisma.ImageCreateManyBannerImageInputEnvelope
  set?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  disconnect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  delete?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  update?: Prisma.ImageUpdateWithWhereUniqueWithoutBannerImageInput | Prisma.ImageUpdateWithWhereUniqueWithoutBannerImageInput[]
  updateMany?: Prisma.ImageUpdateManyWithWhereWithoutBannerImageInput | Prisma.ImageUpdateManyWithWhereWithoutBannerImageInput[]
  deleteMany?: Prisma.ImageScalarWhereInput | Prisma.ImageScalarWhereInput[]
}

export type ImageUpdateManyWithoutBrandImageNestedInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutBrandImageInput, Prisma.ImageUncheckedCreateWithoutBrandImageInput> | Prisma.ImageCreateWithoutBrandImageInput[] | Prisma.ImageUncheckedCreateWithoutBrandImageInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutBrandImageInput | Prisma.ImageCreateOrConnectWithoutBrandImageInput[]
  upsert?: Prisma.ImageUpsertWithWhereUniqueWithoutBrandImageInput | Prisma.ImageUpsertWithWhereUniqueWithoutBrandImageInput[]
  createMany?: Prisma.ImageCreateManyBrandImageInputEnvelope
  set?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  disconnect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  delete?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  update?: Prisma.ImageUpdateWithWhereUniqueWithoutBrandImageInput | Prisma.ImageUpdateWithWhereUniqueWithoutBrandImageInput[]
  updateMany?: Prisma.ImageUpdateManyWithWhereWithoutBrandImageInput | Prisma.ImageUpdateManyWithWhereWithoutBrandImageInput[]
  deleteMany?: Prisma.ImageScalarWhereInput | Prisma.ImageScalarWhereInput[]
}

export type ImageUpdateOneWithoutBrandLogoUrlNestedInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutBrandLogoUrlInput, Prisma.ImageUncheckedCreateWithoutBrandLogoUrlInput>
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutBrandLogoUrlInput
  upsert?: Prisma.ImageUpsertWithoutBrandLogoUrlInput
  disconnect?: Prisma.ImageWhereInput | boolean
  delete?: Prisma.ImageWhereInput | boolean
  connect?: Prisma.ImageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ImageUpdateToOneWithWhereWithoutBrandLogoUrlInput, Prisma.ImageUpdateWithoutBrandLogoUrlInput>, Prisma.ImageUncheckedUpdateWithoutBrandLogoUrlInput>
}

export type ImageUncheckedUpdateManyWithoutBannerImageNestedInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutBannerImageInput, Prisma.ImageUncheckedCreateWithoutBannerImageInput> | Prisma.ImageCreateWithoutBannerImageInput[] | Prisma.ImageUncheckedCreateWithoutBannerImageInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutBannerImageInput | Prisma.ImageCreateOrConnectWithoutBannerImageInput[]
  upsert?: Prisma.ImageUpsertWithWhereUniqueWithoutBannerImageInput | Prisma.ImageUpsertWithWhereUniqueWithoutBannerImageInput[]
  createMany?: Prisma.ImageCreateManyBannerImageInputEnvelope
  set?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  disconnect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  delete?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  update?: Prisma.ImageUpdateWithWhereUniqueWithoutBannerImageInput | Prisma.ImageUpdateWithWhereUniqueWithoutBannerImageInput[]
  updateMany?: Prisma.ImageUpdateManyWithWhereWithoutBannerImageInput | Prisma.ImageUpdateManyWithWhereWithoutBannerImageInput[]
  deleteMany?: Prisma.ImageScalarWhereInput | Prisma.ImageScalarWhereInput[]
}

export type ImageUncheckedUpdateManyWithoutBrandImageNestedInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutBrandImageInput, Prisma.ImageUncheckedCreateWithoutBrandImageInput> | Prisma.ImageCreateWithoutBrandImageInput[] | Prisma.ImageUncheckedCreateWithoutBrandImageInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutBrandImageInput | Prisma.ImageCreateOrConnectWithoutBrandImageInput[]
  upsert?: Prisma.ImageUpsertWithWhereUniqueWithoutBrandImageInput | Prisma.ImageUpsertWithWhereUniqueWithoutBrandImageInput[]
  createMany?: Prisma.ImageCreateManyBrandImageInputEnvelope
  set?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  disconnect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  delete?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  update?: Prisma.ImageUpdateWithWhereUniqueWithoutBrandImageInput | Prisma.ImageUpdateWithWhereUniqueWithoutBrandImageInput[]
  updateMany?: Prisma.ImageUpdateManyWithWhereWithoutBrandImageInput | Prisma.ImageUpdateManyWithWhereWithoutBrandImageInput[]
  deleteMany?: Prisma.ImageScalarWhereInput | Prisma.ImageScalarWhereInput[]
}

export type ImageCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutProductInput, Prisma.ImageUncheckedCreateWithoutProductInput> | Prisma.ImageCreateWithoutProductInput[] | Prisma.ImageUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutProductInput | Prisma.ImageCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ImageCreateManyProductInputEnvelope
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
}

export type ImageUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutProductInput, Prisma.ImageUncheckedCreateWithoutProductInput> | Prisma.ImageCreateWithoutProductInput[] | Prisma.ImageUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutProductInput | Prisma.ImageCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ImageCreateManyProductInputEnvelope
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
}

export type ImageUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutProductInput, Prisma.ImageUncheckedCreateWithoutProductInput> | Prisma.ImageCreateWithoutProductInput[] | Prisma.ImageUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutProductInput | Prisma.ImageCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ImageUpsertWithWhereUniqueWithoutProductInput | Prisma.ImageUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ImageCreateManyProductInputEnvelope
  set?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  disconnect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  delete?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  update?: Prisma.ImageUpdateWithWhereUniqueWithoutProductInput | Prisma.ImageUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ImageUpdateManyWithWhereWithoutProductInput | Prisma.ImageUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ImageScalarWhereInput | Prisma.ImageScalarWhereInput[]
}

export type ImageUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ImageCreateWithoutProductInput, Prisma.ImageUncheckedCreateWithoutProductInput> | Prisma.ImageCreateWithoutProductInput[] | Prisma.ImageUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ImageCreateOrConnectWithoutProductInput | Prisma.ImageCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ImageUpsertWithWhereUniqueWithoutProductInput | Prisma.ImageUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ImageCreateManyProductInputEnvelope
  set?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  disconnect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  delete?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  connect?: Prisma.ImageWhereUniqueInput | Prisma.ImageWhereUniqueInput[]
  update?: Prisma.ImageUpdateWithWhereUniqueWithoutProductInput | Prisma.ImageUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ImageUpdateManyWithWhereWithoutProductInput | Prisma.ImageUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ImageScalarWhereInput | Prisma.ImageScalarWhereInput[]
}

export type ImageCreateWithoutCategoryInput = {
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  product?: Prisma.ProductCreateNestedOneWithoutImagesInput
  brandImage?: Prisma.BrandCreateNestedOneWithoutBrandImageInput
  bannerImage?: Prisma.BrandCreateNestedOneWithoutBannerImageInput
  brandLogoUrl?: Prisma.BrandCreateNestedOneWithoutLogoImageInput
  categorySample?: Prisma.CollectionCreateNestedOneWithoutSampleImagesInput
}

export type ImageUncheckedCreateWithoutCategoryInput = {
  id?: number
  productId?: number | null
  bannerImageId?: number | null
  categorySampleId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandId?: number | null
  brandLogoUrl?: Prisma.BrandUncheckedCreateNestedOneWithoutLogoImageInput
}

export type ImageCreateOrConnectWithoutCategoryInput = {
  where: Prisma.ImageWhereUniqueInput
  create: Prisma.XOR<Prisma.ImageCreateWithoutCategoryInput, Prisma.ImageUncheckedCreateWithoutCategoryInput>
}

export type ImageCreateWithoutCategorySampleInput = {
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  product?: Prisma.ProductCreateNestedOneWithoutImagesInput
  brandImage?: Prisma.BrandCreateNestedOneWithoutBrandImageInput
  bannerImage?: Prisma.BrandCreateNestedOneWithoutBannerImageInput
  brandLogoUrl?: Prisma.BrandCreateNestedOneWithoutLogoImageInput
  category?: Prisma.CollectionCreateNestedOneWithoutBannerImageInput
}

export type ImageUncheckedCreateWithoutCategorySampleInput = {
  id?: number
  productId?: number | null
  bannerImageId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandId?: number | null
  brandLogoUrl?: Prisma.BrandUncheckedCreateNestedOneWithoutLogoImageInput
  category?: Prisma.CollectionUncheckedCreateNestedOneWithoutBannerImageInput
}

export type ImageCreateOrConnectWithoutCategorySampleInput = {
  where: Prisma.ImageWhereUniqueInput
  create: Prisma.XOR<Prisma.ImageCreateWithoutCategorySampleInput, Prisma.ImageUncheckedCreateWithoutCategorySampleInput>
}

export type ImageCreateManyCategorySampleInputEnvelope = {
  data: Prisma.ImageCreateManyCategorySampleInput | Prisma.ImageCreateManyCategorySampleInput[]
  skipDuplicates?: boolean
}

export type ImageUpsertWithoutCategoryInput = {
  update: Prisma.XOR<Prisma.ImageUpdateWithoutCategoryInput, Prisma.ImageUncheckedUpdateWithoutCategoryInput>
  create: Prisma.XOR<Prisma.ImageCreateWithoutCategoryInput, Prisma.ImageUncheckedCreateWithoutCategoryInput>
  where?: Prisma.ImageWhereInput
}

export type ImageUpdateToOneWithWhereWithoutCategoryInput = {
  where?: Prisma.ImageWhereInput
  data: Prisma.XOR<Prisma.ImageUpdateWithoutCategoryInput, Prisma.ImageUncheckedUpdateWithoutCategoryInput>
}

export type ImageUpdateWithoutCategoryInput = {
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneWithoutImagesNestedInput
  brandImage?: Prisma.BrandUpdateOneWithoutBrandImageNestedInput
  bannerImage?: Prisma.BrandUpdateOneWithoutBannerImageNestedInput
  brandLogoUrl?: Prisma.BrandUpdateOneWithoutLogoImageNestedInput
  categorySample?: Prisma.CollectionUpdateOneWithoutSampleImagesNestedInput
}

export type ImageUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bannerImageId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  categorySampleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  brandLogoUrl?: Prisma.BrandUncheckedUpdateOneWithoutLogoImageNestedInput
}

export type ImageUpsertWithWhereUniqueWithoutCategorySampleInput = {
  where: Prisma.ImageWhereUniqueInput
  update: Prisma.XOR<Prisma.ImageUpdateWithoutCategorySampleInput, Prisma.ImageUncheckedUpdateWithoutCategorySampleInput>
  create: Prisma.XOR<Prisma.ImageCreateWithoutCategorySampleInput, Prisma.ImageUncheckedCreateWithoutCategorySampleInput>
}

export type ImageUpdateWithWhereUniqueWithoutCategorySampleInput = {
  where: Prisma.ImageWhereUniqueInput
  data: Prisma.XOR<Prisma.ImageUpdateWithoutCategorySampleInput, Prisma.ImageUncheckedUpdateWithoutCategorySampleInput>
}

export type ImageUpdateManyWithWhereWithoutCategorySampleInput = {
  where: Prisma.ImageScalarWhereInput
  data: Prisma.XOR<Prisma.ImageUpdateManyMutationInput, Prisma.ImageUncheckedUpdateManyWithoutCategorySampleInput>
}

export type ImageScalarWhereInput = {
  AND?: Prisma.ImageScalarWhereInput | Prisma.ImageScalarWhereInput[]
  OR?: Prisma.ImageScalarWhereInput[]
  NOT?: Prisma.ImageScalarWhereInput | Prisma.ImageScalarWhereInput[]
  id?: Prisma.IntFilter<"Image"> | number
  productId?: Prisma.IntNullableFilter<"Image"> | number | null
  bannerImageId?: Prisma.IntNullableFilter<"Image"> | number | null
  categorySampleId?: Prisma.IntNullableFilter<"Image"> | number | null
  publicId?: Prisma.StringFilter<"Image"> | string
  url?: Prisma.StringFilter<"Image"> | string
  createdAt?: Prisma.DateTimeFilter<"Image"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Image"> | Date | string
  brandId?: Prisma.IntNullableFilter<"Image"> | number | null
}

export type ImageCreateWithoutBannerImageInput = {
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  product?: Prisma.ProductCreateNestedOneWithoutImagesInput
  brandImage?: Prisma.BrandCreateNestedOneWithoutBrandImageInput
  brandLogoUrl?: Prisma.BrandCreateNestedOneWithoutLogoImageInput
  category?: Prisma.CollectionCreateNestedOneWithoutBannerImageInput
  categorySample?: Prisma.CollectionCreateNestedOneWithoutSampleImagesInput
}

export type ImageUncheckedCreateWithoutBannerImageInput = {
  id?: number
  productId?: number | null
  categorySampleId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandId?: number | null
  brandLogoUrl?: Prisma.BrandUncheckedCreateNestedOneWithoutLogoImageInput
  category?: Prisma.CollectionUncheckedCreateNestedOneWithoutBannerImageInput
}

export type ImageCreateOrConnectWithoutBannerImageInput = {
  where: Prisma.ImageWhereUniqueInput
  create: Prisma.XOR<Prisma.ImageCreateWithoutBannerImageInput, Prisma.ImageUncheckedCreateWithoutBannerImageInput>
}

export type ImageCreateManyBannerImageInputEnvelope = {
  data: Prisma.ImageCreateManyBannerImageInput | Prisma.ImageCreateManyBannerImageInput[]
  skipDuplicates?: boolean
}

export type ImageCreateWithoutBrandImageInput = {
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  product?: Prisma.ProductCreateNestedOneWithoutImagesInput
  bannerImage?: Prisma.BrandCreateNestedOneWithoutBannerImageInput
  brandLogoUrl?: Prisma.BrandCreateNestedOneWithoutLogoImageInput
  category?: Prisma.CollectionCreateNestedOneWithoutBannerImageInput
  categorySample?: Prisma.CollectionCreateNestedOneWithoutSampleImagesInput
}

export type ImageUncheckedCreateWithoutBrandImageInput = {
  id?: number
  productId?: number | null
  bannerImageId?: number | null
  categorySampleId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandLogoUrl?: Prisma.BrandUncheckedCreateNestedOneWithoutLogoImageInput
  category?: Prisma.CollectionUncheckedCreateNestedOneWithoutBannerImageInput
}

export type ImageCreateOrConnectWithoutBrandImageInput = {
  where: Prisma.ImageWhereUniqueInput
  create: Prisma.XOR<Prisma.ImageCreateWithoutBrandImageInput, Prisma.ImageUncheckedCreateWithoutBrandImageInput>
}

export type ImageCreateManyBrandImageInputEnvelope = {
  data: Prisma.ImageCreateManyBrandImageInput | Prisma.ImageCreateManyBrandImageInput[]
  skipDuplicates?: boolean
}

export type ImageCreateWithoutBrandLogoUrlInput = {
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  product?: Prisma.ProductCreateNestedOneWithoutImagesInput
  brandImage?: Prisma.BrandCreateNestedOneWithoutBrandImageInput
  bannerImage?: Prisma.BrandCreateNestedOneWithoutBannerImageInput
  category?: Prisma.CollectionCreateNestedOneWithoutBannerImageInput
  categorySample?: Prisma.CollectionCreateNestedOneWithoutSampleImagesInput
}

export type ImageUncheckedCreateWithoutBrandLogoUrlInput = {
  id?: number
  productId?: number | null
  bannerImageId?: number | null
  categorySampleId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandId?: number | null
  category?: Prisma.CollectionUncheckedCreateNestedOneWithoutBannerImageInput
}

export type ImageCreateOrConnectWithoutBrandLogoUrlInput = {
  where: Prisma.ImageWhereUniqueInput
  create: Prisma.XOR<Prisma.ImageCreateWithoutBrandLogoUrlInput, Prisma.ImageUncheckedCreateWithoutBrandLogoUrlInput>
}

export type ImageUpsertWithWhereUniqueWithoutBannerImageInput = {
  where: Prisma.ImageWhereUniqueInput
  update: Prisma.XOR<Prisma.ImageUpdateWithoutBannerImageInput, Prisma.ImageUncheckedUpdateWithoutBannerImageInput>
  create: Prisma.XOR<Prisma.ImageCreateWithoutBannerImageInput, Prisma.ImageUncheckedCreateWithoutBannerImageInput>
}

export type ImageUpdateWithWhereUniqueWithoutBannerImageInput = {
  where: Prisma.ImageWhereUniqueInput
  data: Prisma.XOR<Prisma.ImageUpdateWithoutBannerImageInput, Prisma.ImageUncheckedUpdateWithoutBannerImageInput>
}

export type ImageUpdateManyWithWhereWithoutBannerImageInput = {
  where: Prisma.ImageScalarWhereInput
  data: Prisma.XOR<Prisma.ImageUpdateManyMutationInput, Prisma.ImageUncheckedUpdateManyWithoutBannerImageInput>
}

export type ImageUpsertWithWhereUniqueWithoutBrandImageInput = {
  where: Prisma.ImageWhereUniqueInput
  update: Prisma.XOR<Prisma.ImageUpdateWithoutBrandImageInput, Prisma.ImageUncheckedUpdateWithoutBrandImageInput>
  create: Prisma.XOR<Prisma.ImageCreateWithoutBrandImageInput, Prisma.ImageUncheckedCreateWithoutBrandImageInput>
}

export type ImageUpdateWithWhereUniqueWithoutBrandImageInput = {
  where: Prisma.ImageWhereUniqueInput
  data: Prisma.XOR<Prisma.ImageUpdateWithoutBrandImageInput, Prisma.ImageUncheckedUpdateWithoutBrandImageInput>
}

export type ImageUpdateManyWithWhereWithoutBrandImageInput = {
  where: Prisma.ImageScalarWhereInput
  data: Prisma.XOR<Prisma.ImageUpdateManyMutationInput, Prisma.ImageUncheckedUpdateManyWithoutBrandImageInput>
}

export type ImageUpsertWithoutBrandLogoUrlInput = {
  update: Prisma.XOR<Prisma.ImageUpdateWithoutBrandLogoUrlInput, Prisma.ImageUncheckedUpdateWithoutBrandLogoUrlInput>
  create: Prisma.XOR<Prisma.ImageCreateWithoutBrandLogoUrlInput, Prisma.ImageUncheckedCreateWithoutBrandLogoUrlInput>
  where?: Prisma.ImageWhereInput
}

export type ImageUpdateToOneWithWhereWithoutBrandLogoUrlInput = {
  where?: Prisma.ImageWhereInput
  data: Prisma.XOR<Prisma.ImageUpdateWithoutBrandLogoUrlInput, Prisma.ImageUncheckedUpdateWithoutBrandLogoUrlInput>
}

export type ImageUpdateWithoutBrandLogoUrlInput = {
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneWithoutImagesNestedInput
  brandImage?: Prisma.BrandUpdateOneWithoutBrandImageNestedInput
  bannerImage?: Prisma.BrandUpdateOneWithoutBannerImageNestedInput
  category?: Prisma.CollectionUpdateOneWithoutBannerImageNestedInput
  categorySample?: Prisma.CollectionUpdateOneWithoutSampleImagesNestedInput
}

export type ImageUncheckedUpdateWithoutBrandLogoUrlInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bannerImageId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  categorySampleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  category?: Prisma.CollectionUncheckedUpdateOneWithoutBannerImageNestedInput
}

export type ImageCreateWithoutProductInput = {
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandImage?: Prisma.BrandCreateNestedOneWithoutBrandImageInput
  bannerImage?: Prisma.BrandCreateNestedOneWithoutBannerImageInput
  brandLogoUrl?: Prisma.BrandCreateNestedOneWithoutLogoImageInput
  category?: Prisma.CollectionCreateNestedOneWithoutBannerImageInput
  categorySample?: Prisma.CollectionCreateNestedOneWithoutSampleImagesInput
}

export type ImageUncheckedCreateWithoutProductInput = {
  id?: number
  bannerImageId?: number | null
  categorySampleId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandId?: number | null
  brandLogoUrl?: Prisma.BrandUncheckedCreateNestedOneWithoutLogoImageInput
  category?: Prisma.CollectionUncheckedCreateNestedOneWithoutBannerImageInput
}

export type ImageCreateOrConnectWithoutProductInput = {
  where: Prisma.ImageWhereUniqueInput
  create: Prisma.XOR<Prisma.ImageCreateWithoutProductInput, Prisma.ImageUncheckedCreateWithoutProductInput>
}

export type ImageCreateManyProductInputEnvelope = {
  data: Prisma.ImageCreateManyProductInput | Prisma.ImageCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ImageUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ImageWhereUniqueInput
  update: Prisma.XOR<Prisma.ImageUpdateWithoutProductInput, Prisma.ImageUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ImageCreateWithoutProductInput, Prisma.ImageUncheckedCreateWithoutProductInput>
}

export type ImageUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ImageWhereUniqueInput
  data: Prisma.XOR<Prisma.ImageUpdateWithoutProductInput, Prisma.ImageUncheckedUpdateWithoutProductInput>
}

export type ImageUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ImageScalarWhereInput
  data: Prisma.XOR<Prisma.ImageUpdateManyMutationInput, Prisma.ImageUncheckedUpdateManyWithoutProductInput>
}

export type ImageCreateManyCategorySampleInput = {
  id?: number
  productId?: number | null
  bannerImageId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandId?: number | null
}

export type ImageUpdateWithoutCategorySampleInput = {
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneWithoutImagesNestedInput
  brandImage?: Prisma.BrandUpdateOneWithoutBrandImageNestedInput
  bannerImage?: Prisma.BrandUpdateOneWithoutBannerImageNestedInput
  brandLogoUrl?: Prisma.BrandUpdateOneWithoutLogoImageNestedInput
  category?: Prisma.CollectionUpdateOneWithoutBannerImageNestedInput
}

export type ImageUncheckedUpdateWithoutCategorySampleInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bannerImageId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  brandLogoUrl?: Prisma.BrandUncheckedUpdateOneWithoutLogoImageNestedInput
  category?: Prisma.CollectionUncheckedUpdateOneWithoutBannerImageNestedInput
}

export type ImageUncheckedUpdateManyWithoutCategorySampleInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bannerImageId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ImageCreateManyBannerImageInput = {
  id?: number
  productId?: number | null
  categorySampleId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandId?: number | null
}

export type ImageCreateManyBrandImageInput = {
  id?: number
  productId?: number | null
  bannerImageId?: number | null
  categorySampleId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ImageUpdateWithoutBannerImageInput = {
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneWithoutImagesNestedInput
  brandImage?: Prisma.BrandUpdateOneWithoutBrandImageNestedInput
  brandLogoUrl?: Prisma.BrandUpdateOneWithoutLogoImageNestedInput
  category?: Prisma.CollectionUpdateOneWithoutBannerImageNestedInput
  categorySample?: Prisma.CollectionUpdateOneWithoutSampleImagesNestedInput
}

export type ImageUncheckedUpdateWithoutBannerImageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  categorySampleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  brandLogoUrl?: Prisma.BrandUncheckedUpdateOneWithoutLogoImageNestedInput
  category?: Prisma.CollectionUncheckedUpdateOneWithoutBannerImageNestedInput
}

export type ImageUncheckedUpdateManyWithoutBannerImageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  categorySampleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ImageUpdateWithoutBrandImageInput = {
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneWithoutImagesNestedInput
  bannerImage?: Prisma.BrandUpdateOneWithoutBannerImageNestedInput
  brandLogoUrl?: Prisma.BrandUpdateOneWithoutLogoImageNestedInput
  category?: Prisma.CollectionUpdateOneWithoutBannerImageNestedInput
  categorySample?: Prisma.CollectionUpdateOneWithoutSampleImagesNestedInput
}

export type ImageUncheckedUpdateWithoutBrandImageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bannerImageId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  categorySampleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandLogoUrl?: Prisma.BrandUncheckedUpdateOneWithoutLogoImageNestedInput
  category?: Prisma.CollectionUncheckedUpdateOneWithoutBannerImageNestedInput
}

export type ImageUncheckedUpdateManyWithoutBrandImageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  bannerImageId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  categorySampleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ImageCreateManyProductInput = {
  id?: number
  bannerImageId?: number | null
  categorySampleId?: number | null
  publicId: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  brandId?: number | null
}

export type ImageUpdateWithoutProductInput = {
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandImage?: Prisma.BrandUpdateOneWithoutBrandImageNestedInput
  bannerImage?: Prisma.BrandUpdateOneWithoutBannerImageNestedInput
  brandLogoUrl?: Prisma.BrandUpdateOneWithoutLogoImageNestedInput
  category?: Prisma.CollectionUpdateOneWithoutBannerImageNestedInput
  categorySample?: Prisma.CollectionUpdateOneWithoutSampleImagesNestedInput
}

export type ImageUncheckedUpdateWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  bannerImageId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  categorySampleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  brandLogoUrl?: Prisma.BrandUncheckedUpdateOneWithoutLogoImageNestedInput
  category?: Prisma.CollectionUncheckedUpdateOneWithoutBannerImageNestedInput
}

export type ImageUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  bannerImageId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  categorySampleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  publicId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brandId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type ImageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  bannerImageId?: boolean
  categorySampleId?: boolean
  publicId?: boolean
  url?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  brandId?: boolean
  product?: boolean | Prisma.Image$productArgs<ExtArgs>
  brandImage?: boolean | Prisma.Image$brandImageArgs<ExtArgs>
  bannerImage?: boolean | Prisma.Image$bannerImageArgs<ExtArgs>
  brandLogoUrl?: boolean | Prisma.Image$brandLogoUrlArgs<ExtArgs>
  category?: boolean | Prisma.Image$categoryArgs<ExtArgs>
  categorySample?: boolean | Prisma.Image$categorySampleArgs<ExtArgs>
}, ExtArgs["result"]["image"]>

export type ImageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  bannerImageId?: boolean
  categorySampleId?: boolean
  publicId?: boolean
  url?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  brandId?: boolean
  product?: boolean | Prisma.Image$productArgs<ExtArgs>
  brandImage?: boolean | Prisma.Image$brandImageArgs<ExtArgs>
  bannerImage?: boolean | Prisma.Image$bannerImageArgs<ExtArgs>
  categorySample?: boolean | Prisma.Image$categorySampleArgs<ExtArgs>
}, ExtArgs["result"]["image"]>

export type ImageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  bannerImageId?: boolean
  categorySampleId?: boolean
  publicId?: boolean
  url?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  brandId?: boolean
  product?: boolean | Prisma.Image$productArgs<ExtArgs>
  brandImage?: boolean | Prisma.Image$brandImageArgs<ExtArgs>
  bannerImage?: boolean | Prisma.Image$bannerImageArgs<ExtArgs>
  categorySample?: boolean | Prisma.Image$categorySampleArgs<ExtArgs>
}, ExtArgs["result"]["image"]>

export type ImageSelectScalar = {
  id?: boolean
  productId?: boolean
  bannerImageId?: boolean
  categorySampleId?: boolean
  publicId?: boolean
  url?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  brandId?: boolean
}

export type ImageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "bannerImageId" | "categorySampleId" | "publicId" | "url" | "createdAt" | "updatedAt" | "brandId", ExtArgs["result"]["image"]>
export type ImageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.Image$productArgs<ExtArgs>
  brandImage?: boolean | Prisma.Image$brandImageArgs<ExtArgs>
  bannerImage?: boolean | Prisma.Image$bannerImageArgs<ExtArgs>
  brandLogoUrl?: boolean | Prisma.Image$brandLogoUrlArgs<ExtArgs>
  category?: boolean | Prisma.Image$categoryArgs<ExtArgs>
  categorySample?: boolean | Prisma.Image$categorySampleArgs<ExtArgs>
}
export type ImageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.Image$productArgs<ExtArgs>
  brandImage?: boolean | Prisma.Image$brandImageArgs<ExtArgs>
  bannerImage?: boolean | Prisma.Image$bannerImageArgs<ExtArgs>
  categorySample?: boolean | Prisma.Image$categorySampleArgs<ExtArgs>
}
export type ImageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.Image$productArgs<ExtArgs>
  brandImage?: boolean | Prisma.Image$brandImageArgs<ExtArgs>
  bannerImage?: boolean | Prisma.Image$bannerImageArgs<ExtArgs>
  categorySample?: boolean | Prisma.Image$categorySampleArgs<ExtArgs>
}

export type $ImagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Image"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs> | null
    brandImage: Prisma.$BrandPayload<ExtArgs> | null
    bannerImage: Prisma.$BrandPayload<ExtArgs> | null
    brandLogoUrl: Prisma.$BrandPayload<ExtArgs> | null
    category: Prisma.$CollectionPayload<ExtArgs> | null
    categorySample: Prisma.$CollectionPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    productId: number | null
    bannerImageId: number | null
    categorySampleId: number | null
    publicId: string
    url: string
    createdAt: Date
    updatedAt: Date
    brandId: number | null
  }, ExtArgs["result"]["image"]>
  composites: {}
}

export type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ImagePayload, S>

export type ImageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ImageCountAggregateInputType | true
  }

export interface ImageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
  /**
   * Find zero or one Image that matches the filter.
   * @param {ImageFindUniqueArgs} args - Arguments to find a Image
   * @example
   * // Get one Image
   * const image = await prisma.image.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ImageFindUniqueArgs>(args: Prisma.SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ImageClient<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Image that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
   * @example
   * // Get one Image
   * const image = await prisma.image.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ImageClient<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Image that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageFindFirstArgs} args - Arguments to find a Image
   * @example
   * // Get one Image
   * const image = await prisma.image.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ImageFindFirstArgs>(args?: Prisma.SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma.Prisma__ImageClient<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Image that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
   * @example
   * // Get one Image
   * const image = await prisma.image.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ImageClient<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Images that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Images
   * const images = await prisma.image.findMany()
   * 
   * // Get first 10 Images
   * const images = await prisma.image.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ImageFindManyArgs>(args?: Prisma.SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Image.
   * @param {ImageCreateArgs} args - Arguments to create a Image.
   * @example
   * // Create one Image
   * const Image = await prisma.image.create({
   *   data: {
   *     // ... data to create a Image
   *   }
   * })
   * 
   */
  create<T extends ImageCreateArgs>(args: Prisma.SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma.Prisma__ImageClient<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Images.
   * @param {ImageCreateManyArgs} args - Arguments to create many Images.
   * @example
   * // Create many Images
   * const image = await prisma.image.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ImageCreateManyArgs>(args?: Prisma.SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Images and returns the data saved in the database.
   * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
   * @example
   * // Create many Images
   * const image = await prisma.image.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Images and only return the `id`
   * const imageWithIdOnly = await prisma.image.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ImageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Image.
   * @param {ImageDeleteArgs} args - Arguments to delete one Image.
   * @example
   * // Delete one Image
   * const Image = await prisma.image.delete({
   *   where: {
   *     // ... filter to delete one Image
   *   }
   * })
   * 
   */
  delete<T extends ImageDeleteArgs>(args: Prisma.SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma.Prisma__ImageClient<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Image.
   * @param {ImageUpdateArgs} args - Arguments to update one Image.
   * @example
   * // Update one Image
   * const image = await prisma.image.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ImageUpdateArgs>(args: Prisma.SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma.Prisma__ImageClient<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Images.
   * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
   * @example
   * // Delete a few Images
   * const { count } = await prisma.image.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ImageDeleteManyArgs>(args?: Prisma.SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Images.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Images
   * const image = await prisma.image.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ImageUpdateManyArgs>(args: Prisma.SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Images and returns the data updated in the database.
   * @param {ImageUpdateManyAndReturnArgs} args - Arguments to update many Images.
   * @example
   * // Update many Images
   * const image = await prisma.image.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Images and only return the `id`
   * const imageWithIdOnly = await prisma.image.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ImageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Image.
   * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
   * @example
   * // Update or create a Image
   * const image = await prisma.image.upsert({
   *   create: {
   *     // ... data to create a Image
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Image we want to update
   *   }
   * })
   */
  upsert<T extends ImageUpsertArgs>(args: Prisma.SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma.Prisma__ImageClient<runtime.Types.Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Images.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageCountArgs} args - Arguments to filter Images to count.
   * @example
   * // Count the number of Images
   * const count = await prisma.image.count({
   *   where: {
   *     // ... the filter for the Images we want to count
   *   }
   * })
  **/
  count<T extends ImageCountArgs>(
    args?: Prisma.Subset<T, ImageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ImageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Image.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ImageAggregateArgs>(args: Prisma.Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

  /**
   * Group by Image.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ImageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ImageGroupByArgs['orderBy'] }
      : { orderBy?: ImageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Image model
 */
readonly fields: ImageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Image.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ImageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.Image$productArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Image$productArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  brandImage<T extends Prisma.Image$brandImageArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Image$brandImageArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  bannerImage<T extends Prisma.Image$bannerImageArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Image$bannerImageArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  brandLogoUrl<T extends Prisma.Image$brandLogoUrlArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Image$brandLogoUrlArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  category<T extends Prisma.Image$categoryArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Image$categoryArgs<ExtArgs>>): Prisma.Prisma__CollectionClient<runtime.Types.Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  categorySample<T extends Prisma.Image$categorySampleArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Image$categorySampleArgs<ExtArgs>>): Prisma.Prisma__CollectionClient<runtime.Types.Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Image model
 */
export interface ImageFieldRefs {
  readonly id: Prisma.FieldRef<"Image", 'Int'>
  readonly productId: Prisma.FieldRef<"Image", 'Int'>
  readonly bannerImageId: Prisma.FieldRef<"Image", 'Int'>
  readonly categorySampleId: Prisma.FieldRef<"Image", 'Int'>
  readonly publicId: Prisma.FieldRef<"Image", 'String'>
  readonly url: Prisma.FieldRef<"Image", 'String'>
  readonly createdAt: Prisma.FieldRef<"Image", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Image", 'DateTime'>
  readonly brandId: Prisma.FieldRef<"Image", 'Int'>
}
    

// Custom InputTypes
/**
 * Image findUnique
 */
export type ImageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageInclude<ExtArgs> | null
  /**
   * Filter, which Image to fetch.
   */
  where: Prisma.ImageWhereUniqueInput
}

/**
 * Image findUniqueOrThrow
 */
export type ImageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageInclude<ExtArgs> | null
  /**
   * Filter, which Image to fetch.
   */
  where: Prisma.ImageWhereUniqueInput
}

/**
 * Image findFirst
 */
export type ImageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageInclude<ExtArgs> | null
  /**
   * Filter, which Image to fetch.
   */
  where?: Prisma.ImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Images to fetch.
   */
  orderBy?: Prisma.ImageOrderByWithRelationInput | Prisma.ImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Images.
   */
  cursor?: Prisma.ImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Images from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Images.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Images.
   */
  distinct?: Prisma.ImageScalarFieldEnum | Prisma.ImageScalarFieldEnum[]
}

/**
 * Image findFirstOrThrow
 */
export type ImageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageInclude<ExtArgs> | null
  /**
   * Filter, which Image to fetch.
   */
  where?: Prisma.ImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Images to fetch.
   */
  orderBy?: Prisma.ImageOrderByWithRelationInput | Prisma.ImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Images.
   */
  cursor?: Prisma.ImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Images from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Images.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Images.
   */
  distinct?: Prisma.ImageScalarFieldEnum | Prisma.ImageScalarFieldEnum[]
}

/**
 * Image findMany
 */
export type ImageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageInclude<ExtArgs> | null
  /**
   * Filter, which Images to fetch.
   */
  where?: Prisma.ImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Images to fetch.
   */
  orderBy?: Prisma.ImageOrderByWithRelationInput | Prisma.ImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Images.
   */
  cursor?: Prisma.ImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Images from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Images.
   */
  skip?: number
  distinct?: Prisma.ImageScalarFieldEnum | Prisma.ImageScalarFieldEnum[]
}

/**
 * Image create
 */
export type ImageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageInclude<ExtArgs> | null
  /**
   * The data needed to create a Image.
   */
  data: Prisma.XOR<Prisma.ImageCreateInput, Prisma.ImageUncheckedCreateInput>
}

/**
 * Image createMany
 */
export type ImageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Images.
   */
  data: Prisma.ImageCreateManyInput | Prisma.ImageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Image createManyAndReturn
 */
export type ImageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * The data used to create many Images.
   */
  data: Prisma.ImageCreateManyInput | Prisma.ImageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Image update
 */
export type ImageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageInclude<ExtArgs> | null
  /**
   * The data needed to update a Image.
   */
  data: Prisma.XOR<Prisma.ImageUpdateInput, Prisma.ImageUncheckedUpdateInput>
  /**
   * Choose, which Image to update.
   */
  where: Prisma.ImageWhereUniqueInput
}

/**
 * Image updateMany
 */
export type ImageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Images.
   */
  data: Prisma.XOR<Prisma.ImageUpdateManyMutationInput, Prisma.ImageUncheckedUpdateManyInput>
  /**
   * Filter which Images to update
   */
  where?: Prisma.ImageWhereInput
  /**
   * Limit how many Images to update.
   */
  limit?: number
}

/**
 * Image updateManyAndReturn
 */
export type ImageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * The data used to update Images.
   */
  data: Prisma.XOR<Prisma.ImageUpdateManyMutationInput, Prisma.ImageUncheckedUpdateManyInput>
  /**
   * Filter which Images to update
   */
  where?: Prisma.ImageWhereInput
  /**
   * Limit how many Images to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Image upsert
 */
export type ImageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageInclude<ExtArgs> | null
  /**
   * The filter to search for the Image to update in case it exists.
   */
  where: Prisma.ImageWhereUniqueInput
  /**
   * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
   */
  create: Prisma.XOR<Prisma.ImageCreateInput, Prisma.ImageUncheckedCreateInput>
  /**
   * In case the Image was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ImageUpdateInput, Prisma.ImageUncheckedUpdateInput>
}

/**
 * Image delete
 */
export type ImageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageInclude<ExtArgs> | null
  /**
   * Filter which Image to delete.
   */
  where: Prisma.ImageWhereUniqueInput
}

/**
 * Image deleteMany
 */
export type ImageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Images to delete
   */
  where?: Prisma.ImageWhereInput
  /**
   * Limit how many Images to delete.
   */
  limit?: number
}

/**
 * Image.product
 */
export type Image$productArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Product
   */
  select?: Prisma.ProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Product
   */
  omit?: Prisma.ProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInclude<ExtArgs> | null
  where?: Prisma.ProductWhereInput
}

/**
 * Image.brandImage
 */
export type Image$brandImageArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  where?: Prisma.BrandWhereInput
}

/**
 * Image.bannerImage
 */
export type Image$bannerImageArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  where?: Prisma.BrandWhereInput
}

/**
 * Image.brandLogoUrl
 */
export type Image$brandLogoUrlArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  where?: Prisma.BrandWhereInput
}

/**
 * Image.category
 */
export type Image$categoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Collection
   */
  select?: Prisma.CollectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Collection
   */
  omit?: Prisma.CollectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionInclude<ExtArgs> | null
  where?: Prisma.CollectionWhereInput
}

/**
 * Image.categorySample
 */
export type Image$categorySampleArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Collection
   */
  select?: Prisma.CollectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Collection
   */
  omit?: Prisma.CollectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionInclude<ExtArgs> | null
  where?: Prisma.CollectionWhereInput
}

/**
 * Image without action
 */
export type ImageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Image
   */
  select?: Prisma.ImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Image
   */
  omit?: Prisma.ImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageInclude<ExtArgs> | null
}
