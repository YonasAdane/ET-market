
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ShoppingCart` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ShoppingCart
 * 
 */
export type ShoppingCartModel = runtime.Types.Result.DefaultSelection<Prisma.$ShoppingCartPayload>

export type AggregateShoppingCart = {
  _count: ShoppingCartCountAggregateOutputType | null
  _avg: ShoppingCartAvgAggregateOutputType | null
  _sum: ShoppingCartSumAggregateOutputType | null
  _min: ShoppingCartMinAggregateOutputType | null
  _max: ShoppingCartMaxAggregateOutputType | null
}

export type ShoppingCartAvgAggregateOutputType = {
  id: number | null
  productId: number | null
  quantity: number | null
}

export type ShoppingCartSumAggregateOutputType = {
  id: number | null
  productId: number | null
  quantity: number | null
}

export type ShoppingCartMinAggregateOutputType = {
  id: number | null
  userId: string | null
  productId: number | null
  quantity: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ShoppingCartMaxAggregateOutputType = {
  id: number | null
  userId: string | null
  productId: number | null
  quantity: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ShoppingCartCountAggregateOutputType = {
  id: number
  userId: number
  productId: number
  quantity: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ShoppingCartAvgAggregateInputType = {
  id?: true
  productId?: true
  quantity?: true
}

export type ShoppingCartSumAggregateInputType = {
  id?: true
  productId?: true
  quantity?: true
}

export type ShoppingCartMinAggregateInputType = {
  id?: true
  userId?: true
  productId?: true
  quantity?: true
  createdAt?: true
  updatedAt?: true
}

export type ShoppingCartMaxAggregateInputType = {
  id?: true
  userId?: true
  productId?: true
  quantity?: true
  createdAt?: true
  updatedAt?: true
}

export type ShoppingCartCountAggregateInputType = {
  id?: true
  userId?: true
  productId?: true
  quantity?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ShoppingCartAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ShoppingCart to aggregate.
   */
  where?: Prisma.ShoppingCartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShoppingCarts to fetch.
   */
  orderBy?: Prisma.ShoppingCartOrderByWithRelationInput | Prisma.ShoppingCartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ShoppingCartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShoppingCarts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShoppingCarts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ShoppingCarts
  **/
  _count?: true | ShoppingCartCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ShoppingCartAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ShoppingCartSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ShoppingCartMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ShoppingCartMaxAggregateInputType
}

export type GetShoppingCartAggregateType<T extends ShoppingCartAggregateArgs> = {
      [P in keyof T & keyof AggregateShoppingCart]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateShoppingCart[P]>
    : Prisma.GetScalarType<T[P], AggregateShoppingCart[P]>
}




export type ShoppingCartGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ShoppingCartWhereInput
  orderBy?: Prisma.ShoppingCartOrderByWithAggregationInput | Prisma.ShoppingCartOrderByWithAggregationInput[]
  by: Prisma.ShoppingCartScalarFieldEnum[] | Prisma.ShoppingCartScalarFieldEnum
  having?: Prisma.ShoppingCartScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ShoppingCartCountAggregateInputType | true
  _avg?: ShoppingCartAvgAggregateInputType
  _sum?: ShoppingCartSumAggregateInputType
  _min?: ShoppingCartMinAggregateInputType
  _max?: ShoppingCartMaxAggregateInputType
}

export type ShoppingCartGroupByOutputType = {
  id: number
  userId: string
  productId: number
  quantity: number
  createdAt: Date
  updatedAt: Date
  _count: ShoppingCartCountAggregateOutputType | null
  _avg: ShoppingCartAvgAggregateOutputType | null
  _sum: ShoppingCartSumAggregateOutputType | null
  _min: ShoppingCartMinAggregateOutputType | null
  _max: ShoppingCartMaxAggregateOutputType | null
}

type GetShoppingCartGroupByPayload<T extends ShoppingCartGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ShoppingCartGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ShoppingCartGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ShoppingCartGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ShoppingCartGroupByOutputType[P]>
      }
    >
  >



export type ShoppingCartWhereInput = {
  AND?: Prisma.ShoppingCartWhereInput | Prisma.ShoppingCartWhereInput[]
  OR?: Prisma.ShoppingCartWhereInput[]
  NOT?: Prisma.ShoppingCartWhereInput | Prisma.ShoppingCartWhereInput[]
  id?: Prisma.IntFilter<"ShoppingCart"> | number
  userId?: Prisma.StringFilter<"ShoppingCart"> | string
  productId?: Prisma.IntFilter<"ShoppingCart"> | number
  quantity?: Prisma.IntFilter<"ShoppingCart"> | number
  createdAt?: Prisma.DateTimeFilter<"ShoppingCart"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ShoppingCart"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type ShoppingCartOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  product?: Prisma.ProductOrderByWithRelationInput
}

export type ShoppingCartWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ShoppingCartWhereInput | Prisma.ShoppingCartWhereInput[]
  OR?: Prisma.ShoppingCartWhereInput[]
  NOT?: Prisma.ShoppingCartWhereInput | Prisma.ShoppingCartWhereInput[]
  userId?: Prisma.StringFilter<"ShoppingCart"> | string
  productId?: Prisma.IntFilter<"ShoppingCart"> | number
  quantity?: Prisma.IntFilter<"ShoppingCart"> | number
  createdAt?: Prisma.DateTimeFilter<"ShoppingCart"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ShoppingCart"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type ShoppingCartOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ShoppingCartCountOrderByAggregateInput
  _avg?: Prisma.ShoppingCartAvgOrderByAggregateInput
  _max?: Prisma.ShoppingCartMaxOrderByAggregateInput
  _min?: Prisma.ShoppingCartMinOrderByAggregateInput
  _sum?: Prisma.ShoppingCartSumOrderByAggregateInput
}

export type ShoppingCartScalarWhereWithAggregatesInput = {
  AND?: Prisma.ShoppingCartScalarWhereWithAggregatesInput | Prisma.ShoppingCartScalarWhereWithAggregatesInput[]
  OR?: Prisma.ShoppingCartScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ShoppingCartScalarWhereWithAggregatesInput | Prisma.ShoppingCartScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ShoppingCart"> | number
  userId?: Prisma.StringWithAggregatesFilter<"ShoppingCart"> | string
  productId?: Prisma.IntWithAggregatesFilter<"ShoppingCart"> | number
  quantity?: Prisma.IntWithAggregatesFilter<"ShoppingCart"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ShoppingCart"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ShoppingCart"> | Date | string
}

export type ShoppingCartCreateInput = {
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCartItemsInput
  product: Prisma.ProductCreateNestedOneWithoutCartItemsInput
}

export type ShoppingCartUncheckedCreateInput = {
  id?: number
  userId: string
  productId: number
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShoppingCartUpdateInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCartItemsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutCartItemsNestedInput
}

export type ShoppingCartUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShoppingCartCreateManyInput = {
  id?: number
  userId: string
  productId: number
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShoppingCartUpdateManyMutationInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShoppingCartUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShoppingCartListRelationFilter = {
  every?: Prisma.ShoppingCartWhereInput
  some?: Prisma.ShoppingCartWhereInput
  none?: Prisma.ShoppingCartWhereInput
}

export type ShoppingCartOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ShoppingCartCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ShoppingCartAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
}

export type ShoppingCartMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ShoppingCartMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ShoppingCartSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
}

export type ShoppingCartCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ShoppingCartCreateWithoutUserInput, Prisma.ShoppingCartUncheckedCreateWithoutUserInput> | Prisma.ShoppingCartCreateWithoutUserInput[] | Prisma.ShoppingCartUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShoppingCartCreateOrConnectWithoutUserInput | Prisma.ShoppingCartCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ShoppingCartCreateManyUserInputEnvelope
  connect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
}

export type ShoppingCartUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ShoppingCartCreateWithoutUserInput, Prisma.ShoppingCartUncheckedCreateWithoutUserInput> | Prisma.ShoppingCartCreateWithoutUserInput[] | Prisma.ShoppingCartUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShoppingCartCreateOrConnectWithoutUserInput | Prisma.ShoppingCartCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ShoppingCartCreateManyUserInputEnvelope
  connect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
}

export type ShoppingCartUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ShoppingCartCreateWithoutUserInput, Prisma.ShoppingCartUncheckedCreateWithoutUserInput> | Prisma.ShoppingCartCreateWithoutUserInput[] | Prisma.ShoppingCartUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShoppingCartCreateOrConnectWithoutUserInput | Prisma.ShoppingCartCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ShoppingCartUpsertWithWhereUniqueWithoutUserInput | Prisma.ShoppingCartUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ShoppingCartCreateManyUserInputEnvelope
  set?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  disconnect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  delete?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  connect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  update?: Prisma.ShoppingCartUpdateWithWhereUniqueWithoutUserInput | Prisma.ShoppingCartUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ShoppingCartUpdateManyWithWhereWithoutUserInput | Prisma.ShoppingCartUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ShoppingCartScalarWhereInput | Prisma.ShoppingCartScalarWhereInput[]
}

export type ShoppingCartUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ShoppingCartCreateWithoutUserInput, Prisma.ShoppingCartUncheckedCreateWithoutUserInput> | Prisma.ShoppingCartCreateWithoutUserInput[] | Prisma.ShoppingCartUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShoppingCartCreateOrConnectWithoutUserInput | Prisma.ShoppingCartCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ShoppingCartUpsertWithWhereUniqueWithoutUserInput | Prisma.ShoppingCartUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ShoppingCartCreateManyUserInputEnvelope
  set?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  disconnect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  delete?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  connect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  update?: Prisma.ShoppingCartUpdateWithWhereUniqueWithoutUserInput | Prisma.ShoppingCartUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ShoppingCartUpdateManyWithWhereWithoutUserInput | Prisma.ShoppingCartUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ShoppingCartScalarWhereInput | Prisma.ShoppingCartScalarWhereInput[]
}

export type ShoppingCartCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ShoppingCartCreateWithoutProductInput, Prisma.ShoppingCartUncheckedCreateWithoutProductInput> | Prisma.ShoppingCartCreateWithoutProductInput[] | Prisma.ShoppingCartUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ShoppingCartCreateOrConnectWithoutProductInput | Prisma.ShoppingCartCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ShoppingCartCreateManyProductInputEnvelope
  connect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
}

export type ShoppingCartUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ShoppingCartCreateWithoutProductInput, Prisma.ShoppingCartUncheckedCreateWithoutProductInput> | Prisma.ShoppingCartCreateWithoutProductInput[] | Prisma.ShoppingCartUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ShoppingCartCreateOrConnectWithoutProductInput | Prisma.ShoppingCartCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ShoppingCartCreateManyProductInputEnvelope
  connect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
}

export type ShoppingCartUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ShoppingCartCreateWithoutProductInput, Prisma.ShoppingCartUncheckedCreateWithoutProductInput> | Prisma.ShoppingCartCreateWithoutProductInput[] | Prisma.ShoppingCartUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ShoppingCartCreateOrConnectWithoutProductInput | Prisma.ShoppingCartCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ShoppingCartUpsertWithWhereUniqueWithoutProductInput | Prisma.ShoppingCartUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ShoppingCartCreateManyProductInputEnvelope
  set?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  disconnect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  delete?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  connect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  update?: Prisma.ShoppingCartUpdateWithWhereUniqueWithoutProductInput | Prisma.ShoppingCartUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ShoppingCartUpdateManyWithWhereWithoutProductInput | Prisma.ShoppingCartUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ShoppingCartScalarWhereInput | Prisma.ShoppingCartScalarWhereInput[]
}

export type ShoppingCartUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ShoppingCartCreateWithoutProductInput, Prisma.ShoppingCartUncheckedCreateWithoutProductInput> | Prisma.ShoppingCartCreateWithoutProductInput[] | Prisma.ShoppingCartUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ShoppingCartCreateOrConnectWithoutProductInput | Prisma.ShoppingCartCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ShoppingCartUpsertWithWhereUniqueWithoutProductInput | Prisma.ShoppingCartUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ShoppingCartCreateManyProductInputEnvelope
  set?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  disconnect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  delete?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  connect?: Prisma.ShoppingCartWhereUniqueInput | Prisma.ShoppingCartWhereUniqueInput[]
  update?: Prisma.ShoppingCartUpdateWithWhereUniqueWithoutProductInput | Prisma.ShoppingCartUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ShoppingCartUpdateManyWithWhereWithoutProductInput | Prisma.ShoppingCartUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ShoppingCartScalarWhereInput | Prisma.ShoppingCartScalarWhereInput[]
}

export type ShoppingCartCreateWithoutUserInput = {
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutCartItemsInput
}

export type ShoppingCartUncheckedCreateWithoutUserInput = {
  id?: number
  productId: number
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShoppingCartCreateOrConnectWithoutUserInput = {
  where: Prisma.ShoppingCartWhereUniqueInput
  create: Prisma.XOR<Prisma.ShoppingCartCreateWithoutUserInput, Prisma.ShoppingCartUncheckedCreateWithoutUserInput>
}

export type ShoppingCartCreateManyUserInputEnvelope = {
  data: Prisma.ShoppingCartCreateManyUserInput | Prisma.ShoppingCartCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ShoppingCartUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ShoppingCartWhereUniqueInput
  update: Prisma.XOR<Prisma.ShoppingCartUpdateWithoutUserInput, Prisma.ShoppingCartUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ShoppingCartCreateWithoutUserInput, Prisma.ShoppingCartUncheckedCreateWithoutUserInput>
}

export type ShoppingCartUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ShoppingCartWhereUniqueInput
  data: Prisma.XOR<Prisma.ShoppingCartUpdateWithoutUserInput, Prisma.ShoppingCartUncheckedUpdateWithoutUserInput>
}

export type ShoppingCartUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ShoppingCartScalarWhereInput
  data: Prisma.XOR<Prisma.ShoppingCartUpdateManyMutationInput, Prisma.ShoppingCartUncheckedUpdateManyWithoutUserInput>
}

export type ShoppingCartScalarWhereInput = {
  AND?: Prisma.ShoppingCartScalarWhereInput | Prisma.ShoppingCartScalarWhereInput[]
  OR?: Prisma.ShoppingCartScalarWhereInput[]
  NOT?: Prisma.ShoppingCartScalarWhereInput | Prisma.ShoppingCartScalarWhereInput[]
  id?: Prisma.IntFilter<"ShoppingCart"> | number
  userId?: Prisma.StringFilter<"ShoppingCart"> | string
  productId?: Prisma.IntFilter<"ShoppingCart"> | number
  quantity?: Prisma.IntFilter<"ShoppingCart"> | number
  createdAt?: Prisma.DateTimeFilter<"ShoppingCart"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ShoppingCart"> | Date | string
}

export type ShoppingCartCreateWithoutProductInput = {
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCartItemsInput
}

export type ShoppingCartUncheckedCreateWithoutProductInput = {
  id?: number
  userId: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShoppingCartCreateOrConnectWithoutProductInput = {
  where: Prisma.ShoppingCartWhereUniqueInput
  create: Prisma.XOR<Prisma.ShoppingCartCreateWithoutProductInput, Prisma.ShoppingCartUncheckedCreateWithoutProductInput>
}

export type ShoppingCartCreateManyProductInputEnvelope = {
  data: Prisma.ShoppingCartCreateManyProductInput | Prisma.ShoppingCartCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ShoppingCartUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ShoppingCartWhereUniqueInput
  update: Prisma.XOR<Prisma.ShoppingCartUpdateWithoutProductInput, Prisma.ShoppingCartUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ShoppingCartCreateWithoutProductInput, Prisma.ShoppingCartUncheckedCreateWithoutProductInput>
}

export type ShoppingCartUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ShoppingCartWhereUniqueInput
  data: Prisma.XOR<Prisma.ShoppingCartUpdateWithoutProductInput, Prisma.ShoppingCartUncheckedUpdateWithoutProductInput>
}

export type ShoppingCartUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ShoppingCartScalarWhereInput
  data: Prisma.XOR<Prisma.ShoppingCartUpdateManyMutationInput, Prisma.ShoppingCartUncheckedUpdateManyWithoutProductInput>
}

export type ShoppingCartCreateManyUserInput = {
  id?: number
  productId: number
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShoppingCartUpdateWithoutUserInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutCartItemsNestedInput
}

export type ShoppingCartUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShoppingCartUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShoppingCartCreateManyProductInput = {
  id?: number
  userId: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShoppingCartUpdateWithoutProductInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCartItemsNestedInput
}

export type ShoppingCartUncheckedUpdateWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShoppingCartUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ShoppingCartSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  productId?: boolean
  quantity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shoppingCart"]>

export type ShoppingCartSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  productId?: boolean
  quantity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shoppingCart"]>

export type ShoppingCartSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  productId?: boolean
  quantity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shoppingCart"]>

export type ShoppingCartSelectScalar = {
  id?: boolean
  userId?: boolean
  productId?: boolean
  quantity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ShoppingCartOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "productId" | "quantity" | "createdAt" | "updatedAt", ExtArgs["result"]["shoppingCart"]>
export type ShoppingCartInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ShoppingCartIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ShoppingCartIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $ShoppingCartPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ShoppingCart"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: string
    productId: number
    quantity: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["shoppingCart"]>
  composites: {}
}

export type ShoppingCartGetPayload<S extends boolean | null | undefined | ShoppingCartDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload, S>

export type ShoppingCartCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ShoppingCartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ShoppingCartCountAggregateInputType | true
  }

export interface ShoppingCartDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShoppingCart'], meta: { name: 'ShoppingCart' } }
  /**
   * Find zero or one ShoppingCart that matches the filter.
   * @param {ShoppingCartFindUniqueArgs} args - Arguments to find a ShoppingCart
   * @example
   * // Get one ShoppingCart
   * const shoppingCart = await prisma.shoppingCart.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ShoppingCartFindUniqueArgs>(args: Prisma.SelectSubset<T, ShoppingCartFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ShoppingCartClient<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ShoppingCart that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ShoppingCartFindUniqueOrThrowArgs} args - Arguments to find a ShoppingCart
   * @example
   * // Get one ShoppingCart
   * const shoppingCart = await prisma.shoppingCart.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ShoppingCartFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ShoppingCartFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShoppingCartClient<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ShoppingCart that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShoppingCartFindFirstArgs} args - Arguments to find a ShoppingCart
   * @example
   * // Get one ShoppingCart
   * const shoppingCart = await prisma.shoppingCart.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ShoppingCartFindFirstArgs>(args?: Prisma.SelectSubset<T, ShoppingCartFindFirstArgs<ExtArgs>>): Prisma.Prisma__ShoppingCartClient<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ShoppingCart that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShoppingCartFindFirstOrThrowArgs} args - Arguments to find a ShoppingCart
   * @example
   * // Get one ShoppingCart
   * const shoppingCart = await prisma.shoppingCart.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ShoppingCartFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ShoppingCartFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShoppingCartClient<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ShoppingCarts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShoppingCartFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ShoppingCarts
   * const shoppingCarts = await prisma.shoppingCart.findMany()
   * 
   * // Get first 10 ShoppingCarts
   * const shoppingCarts = await prisma.shoppingCart.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const shoppingCartWithIdOnly = await prisma.shoppingCart.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ShoppingCartFindManyArgs>(args?: Prisma.SelectSubset<T, ShoppingCartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ShoppingCart.
   * @param {ShoppingCartCreateArgs} args - Arguments to create a ShoppingCart.
   * @example
   * // Create one ShoppingCart
   * const ShoppingCart = await prisma.shoppingCart.create({
   *   data: {
   *     // ... data to create a ShoppingCart
   *   }
   * })
   * 
   */
  create<T extends ShoppingCartCreateArgs>(args: Prisma.SelectSubset<T, ShoppingCartCreateArgs<ExtArgs>>): Prisma.Prisma__ShoppingCartClient<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ShoppingCarts.
   * @param {ShoppingCartCreateManyArgs} args - Arguments to create many ShoppingCarts.
   * @example
   * // Create many ShoppingCarts
   * const shoppingCart = await prisma.shoppingCart.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ShoppingCartCreateManyArgs>(args?: Prisma.SelectSubset<T, ShoppingCartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ShoppingCarts and returns the data saved in the database.
   * @param {ShoppingCartCreateManyAndReturnArgs} args - Arguments to create many ShoppingCarts.
   * @example
   * // Create many ShoppingCarts
   * const shoppingCart = await prisma.shoppingCart.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ShoppingCarts and only return the `id`
   * const shoppingCartWithIdOnly = await prisma.shoppingCart.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ShoppingCartCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ShoppingCartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ShoppingCart.
   * @param {ShoppingCartDeleteArgs} args - Arguments to delete one ShoppingCart.
   * @example
   * // Delete one ShoppingCart
   * const ShoppingCart = await prisma.shoppingCart.delete({
   *   where: {
   *     // ... filter to delete one ShoppingCart
   *   }
   * })
   * 
   */
  delete<T extends ShoppingCartDeleteArgs>(args: Prisma.SelectSubset<T, ShoppingCartDeleteArgs<ExtArgs>>): Prisma.Prisma__ShoppingCartClient<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ShoppingCart.
   * @param {ShoppingCartUpdateArgs} args - Arguments to update one ShoppingCart.
   * @example
   * // Update one ShoppingCart
   * const shoppingCart = await prisma.shoppingCart.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ShoppingCartUpdateArgs>(args: Prisma.SelectSubset<T, ShoppingCartUpdateArgs<ExtArgs>>): Prisma.Prisma__ShoppingCartClient<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ShoppingCarts.
   * @param {ShoppingCartDeleteManyArgs} args - Arguments to filter ShoppingCarts to delete.
   * @example
   * // Delete a few ShoppingCarts
   * const { count } = await prisma.shoppingCart.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ShoppingCartDeleteManyArgs>(args?: Prisma.SelectSubset<T, ShoppingCartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ShoppingCarts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShoppingCartUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ShoppingCarts
   * const shoppingCart = await prisma.shoppingCart.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ShoppingCartUpdateManyArgs>(args: Prisma.SelectSubset<T, ShoppingCartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ShoppingCarts and returns the data updated in the database.
   * @param {ShoppingCartUpdateManyAndReturnArgs} args - Arguments to update many ShoppingCarts.
   * @example
   * // Update many ShoppingCarts
   * const shoppingCart = await prisma.shoppingCart.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ShoppingCarts and only return the `id`
   * const shoppingCartWithIdOnly = await prisma.shoppingCart.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ShoppingCartUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ShoppingCartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ShoppingCart.
   * @param {ShoppingCartUpsertArgs} args - Arguments to update or create a ShoppingCart.
   * @example
   * // Update or create a ShoppingCart
   * const shoppingCart = await prisma.shoppingCart.upsert({
   *   create: {
   *     // ... data to create a ShoppingCart
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ShoppingCart we want to update
   *   }
   * })
   */
  upsert<T extends ShoppingCartUpsertArgs>(args: Prisma.SelectSubset<T, ShoppingCartUpsertArgs<ExtArgs>>): Prisma.Prisma__ShoppingCartClient<runtime.Types.Result.GetResult<Prisma.$ShoppingCartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ShoppingCarts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShoppingCartCountArgs} args - Arguments to filter ShoppingCarts to count.
   * @example
   * // Count the number of ShoppingCarts
   * const count = await prisma.shoppingCart.count({
   *   where: {
   *     // ... the filter for the ShoppingCarts we want to count
   *   }
   * })
  **/
  count<T extends ShoppingCartCountArgs>(
    args?: Prisma.Subset<T, ShoppingCartCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ShoppingCartCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ShoppingCart.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShoppingCartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ShoppingCartAggregateArgs>(args: Prisma.Subset<T, ShoppingCartAggregateArgs>): Prisma.PrismaPromise<GetShoppingCartAggregateType<T>>

  /**
   * Group by ShoppingCart.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShoppingCartGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ShoppingCartGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ShoppingCartGroupByArgs['orderBy'] }
      : { orderBy?: ShoppingCartGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ShoppingCartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShoppingCartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ShoppingCart model
 */
readonly fields: ShoppingCartFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ShoppingCart.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ShoppingCartClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ShoppingCart model
 */
export interface ShoppingCartFieldRefs {
  readonly id: Prisma.FieldRef<"ShoppingCart", 'Int'>
  readonly userId: Prisma.FieldRef<"ShoppingCart", 'String'>
  readonly productId: Prisma.FieldRef<"ShoppingCart", 'Int'>
  readonly quantity: Prisma.FieldRef<"ShoppingCart", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ShoppingCart", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ShoppingCart", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ShoppingCart findUnique
 */
export type ShoppingCartFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartInclude<ExtArgs> | null
  /**
   * Filter, which ShoppingCart to fetch.
   */
  where: Prisma.ShoppingCartWhereUniqueInput
}

/**
 * ShoppingCart findUniqueOrThrow
 */
export type ShoppingCartFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartInclude<ExtArgs> | null
  /**
   * Filter, which ShoppingCart to fetch.
   */
  where: Prisma.ShoppingCartWhereUniqueInput
}

/**
 * ShoppingCart findFirst
 */
export type ShoppingCartFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartInclude<ExtArgs> | null
  /**
   * Filter, which ShoppingCart to fetch.
   */
  where?: Prisma.ShoppingCartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShoppingCarts to fetch.
   */
  orderBy?: Prisma.ShoppingCartOrderByWithRelationInput | Prisma.ShoppingCartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ShoppingCarts.
   */
  cursor?: Prisma.ShoppingCartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShoppingCarts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShoppingCarts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ShoppingCarts.
   */
  distinct?: Prisma.ShoppingCartScalarFieldEnum | Prisma.ShoppingCartScalarFieldEnum[]
}

/**
 * ShoppingCart findFirstOrThrow
 */
export type ShoppingCartFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartInclude<ExtArgs> | null
  /**
   * Filter, which ShoppingCart to fetch.
   */
  where?: Prisma.ShoppingCartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShoppingCarts to fetch.
   */
  orderBy?: Prisma.ShoppingCartOrderByWithRelationInput | Prisma.ShoppingCartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ShoppingCarts.
   */
  cursor?: Prisma.ShoppingCartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShoppingCarts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShoppingCarts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ShoppingCarts.
   */
  distinct?: Prisma.ShoppingCartScalarFieldEnum | Prisma.ShoppingCartScalarFieldEnum[]
}

/**
 * ShoppingCart findMany
 */
export type ShoppingCartFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartInclude<ExtArgs> | null
  /**
   * Filter, which ShoppingCarts to fetch.
   */
  where?: Prisma.ShoppingCartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShoppingCarts to fetch.
   */
  orderBy?: Prisma.ShoppingCartOrderByWithRelationInput | Prisma.ShoppingCartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ShoppingCarts.
   */
  cursor?: Prisma.ShoppingCartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShoppingCarts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShoppingCarts.
   */
  skip?: number
  distinct?: Prisma.ShoppingCartScalarFieldEnum | Prisma.ShoppingCartScalarFieldEnum[]
}

/**
 * ShoppingCart create
 */
export type ShoppingCartCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartInclude<ExtArgs> | null
  /**
   * The data needed to create a ShoppingCart.
   */
  data: Prisma.XOR<Prisma.ShoppingCartCreateInput, Prisma.ShoppingCartUncheckedCreateInput>
}

/**
 * ShoppingCart createMany
 */
export type ShoppingCartCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ShoppingCarts.
   */
  data: Prisma.ShoppingCartCreateManyInput | Prisma.ShoppingCartCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ShoppingCart createManyAndReturn
 */
export type ShoppingCartCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * The data used to create many ShoppingCarts.
   */
  data: Prisma.ShoppingCartCreateManyInput | Prisma.ShoppingCartCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ShoppingCart update
 */
export type ShoppingCartUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartInclude<ExtArgs> | null
  /**
   * The data needed to update a ShoppingCart.
   */
  data: Prisma.XOR<Prisma.ShoppingCartUpdateInput, Prisma.ShoppingCartUncheckedUpdateInput>
  /**
   * Choose, which ShoppingCart to update.
   */
  where: Prisma.ShoppingCartWhereUniqueInput
}

/**
 * ShoppingCart updateMany
 */
export type ShoppingCartUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ShoppingCarts.
   */
  data: Prisma.XOR<Prisma.ShoppingCartUpdateManyMutationInput, Prisma.ShoppingCartUncheckedUpdateManyInput>
  /**
   * Filter which ShoppingCarts to update
   */
  where?: Prisma.ShoppingCartWhereInput
  /**
   * Limit how many ShoppingCarts to update.
   */
  limit?: number
}

/**
 * ShoppingCart updateManyAndReturn
 */
export type ShoppingCartUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * The data used to update ShoppingCarts.
   */
  data: Prisma.XOR<Prisma.ShoppingCartUpdateManyMutationInput, Prisma.ShoppingCartUncheckedUpdateManyInput>
  /**
   * Filter which ShoppingCarts to update
   */
  where?: Prisma.ShoppingCartWhereInput
  /**
   * Limit how many ShoppingCarts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ShoppingCart upsert
 */
export type ShoppingCartUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartInclude<ExtArgs> | null
  /**
   * The filter to search for the ShoppingCart to update in case it exists.
   */
  where: Prisma.ShoppingCartWhereUniqueInput
  /**
   * In case the ShoppingCart found by the `where` argument doesn't exist, create a new ShoppingCart with this data.
   */
  create: Prisma.XOR<Prisma.ShoppingCartCreateInput, Prisma.ShoppingCartUncheckedCreateInput>
  /**
   * In case the ShoppingCart was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ShoppingCartUpdateInput, Prisma.ShoppingCartUncheckedUpdateInput>
}

/**
 * ShoppingCart delete
 */
export type ShoppingCartDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartInclude<ExtArgs> | null
  /**
   * Filter which ShoppingCart to delete.
   */
  where: Prisma.ShoppingCartWhereUniqueInput
}

/**
 * ShoppingCart deleteMany
 */
export type ShoppingCartDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ShoppingCarts to delete
   */
  where?: Prisma.ShoppingCartWhereInput
  /**
   * Limit how many ShoppingCarts to delete.
   */
  limit?: number
}

/**
 * ShoppingCart without action
 */
export type ShoppingCartDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShoppingCart
   */
  select?: Prisma.ShoppingCartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShoppingCart
   */
  omit?: Prisma.ShoppingCartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShoppingCartInclude<ExtArgs> | null
}
