generator client {
  provider = "prisma-client"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role           @default(CUSTOMER)
  firstName     String?
  lastName      String?
  phoneNumber   String?
  address       String?
  avatar        String?
  googleId      String?        @unique
  createdAt     DateTime       @default(now())
  orders        Order[]        @relation("UserOrders")
  reviews       Review[]       @relation("UserReviews")
  wishlist      Wishlist[]
  cartItems     ShoppingCart[]
  accounts      Account[]
  sessions      Session[]
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model Category {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  description     String?
  images          Image[]      @relation("CategoryImages")
  products        Product[]    @relation("CategoryProducts")
  parentId        Int?
  parentCategory  Category?    @relation("CategoryParentCategory", fields: [parentId], references: [id])
  childCategory   Category[]   @relation("CategoryParentCategory")
  variants        Variant[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("categories")
}

model Variant {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  values      Values[]
}

model Values{
  id            Int @id @default(autoincrement())
  value         String
  variantId     Int
  variant       Variant @relation(fields: [variantId], references: [id])
  variationValues ProductItem[] @relation("productConfiguration")
}


model Product {
  id            Int            @id @default(autoincrement())
  categoryId    Int?
  brandId       Int?
  rating        Int?
  gender        String?
  name          String
  description   String?
  images        Image[]        @relation("ProductImages")
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  category      Category?      @relation("CategoryProducts", fields: [categoryId], references: [id])
  brand         Brand?         @relation("BrandProducts", fields: [brandId], references: [id])
  reviews       Review[]       @relation("ProductReviews")
  wishlist      Wishlist[]
  cartItems     ShoppingCart[]
  productItems  ProductItem[]

  @@map("products")
  @@index([categoryId])
  @@index([brandId])
}

model ProductItem {
  id              Int            @id @default(autoincrement())
  productId       Int
  gender          String?
  name            String
  description     String?
  price           Float
  prevPrice       Float
  stock           Int
  images          Image[]        @relation("ProductItemImages")
  updatedAt       DateTime       @updatedAt
  createdAt       DateTime       @default(now())
  product         Product        @relation(fields: [productId], references: [id])
  orderItems      OrderItem[]    @relation("ProductOrderItems")
  variationValues Values[]       @relation("productConfiguration")

  @@map("product_item")
  @@index([productId])
}

model Brand {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  images      Image[]   @relation("BrandImages")
  products    Product[] @relation("BrandProducts")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("brands")
}



model Image {
  id             Int          @id @default(autoincrement())
  url            String
  altText    String?
  width      Int?
  height     Int?
  size       Int? 
  publicId       String
  type           ImageType
  productId      Int?
  productItemId  Int?
  brandId        Int?
  categoryId     Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  product        Product?     @relation("ProductImages", fields: [productId], references: [id])
  productItem    ProductItem? @relation("ProductItemImages", fields: [productItemId], references: [id])
  brand          Brand?       @relation("BrandImages", fields: [brandId], references: [id])
  category       Category?    @relation("CategoryImages", fields: [categoryId], references: [id])
}

enum ImageType {
  PRODUCT
  PRODUCT_ITEM
  CATEGORY_BANNER
  CATEGORY_SAMPLE
  BRAND_LOGO
  BRAND_BANNER
  BRAND_IMAGE
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      String
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation("UserOrders", fields: [userId], references: [id])
  items       OrderItem[] @relation("OrderItems")
  payment     Payment?    @relation()
  shipping    Shipping?   @relation("OrderShipping")

  @@map("orders")
  @@index([userId])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productItemId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation("OrderItems", fields: [orderId], references: [id])
  productItem   ProductItem  @relation("ProductOrderItems", fields: [productItemId], references: [id])

  @@map("order_items")
}

model Payment {
  id          Int           @id @default(autoincrement())
  orderId     Int           @unique
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  paymentDate DateTime      @default(now())
  order       Order         @relation(fields: [orderId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("payments")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation("ProductReviews", fields: [productId], references: [id])
  user      User     @relation("UserReviews", fields: [userId], references: [id])

  @@map("reviews")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    String
  productId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  updatedAt DateTime @updatedAt

  @@map("wishlist")
}

model ShoppingCart {
  id        Int      @id @default(autoincrement())
  userId    String
  productId Int
  quantity  Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shopping_cart")
}

model Shipping {
  id           Int            @id @default(autoincrement())
  orderId      Int            @unique
  address      String
  city         String
  state        String
  postalCode   String
  country      String
  status       ShippingStatus @default(PENDING)
  shippingDate DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  order        Order          @relation("OrderShipping", fields: [orderId], references: [id])

  @@map("shipping")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
}
