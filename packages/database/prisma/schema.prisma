generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int            @id @default(autoincrement())
  username    String         @unique
  email       String         @unique
  password    String?
  role        Role           @default(CUSTOMER)
  firstName   String?
  lastName    String?
  phoneNumber String?
  address     String?
  avatar      String?
  googleId    String?        @unique
  createdAt   DateTime       @default(now())
  orders      Order[]        @relation("UserOrders")
  reviews     Review[]       @relation("UserReviews")
  wishlist    Wishlist[]
  cartItems   ShoppingCart[]

  @@map("users")
}

model Category {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  bannerImage   Image?    @relation(fields: [bannerImageId], references: [id])
  sampleImages  Image[]   @relation("categorySampleImage")
  products      Product[] @relation("CategoryProducts")
  bannerImageId Int?      @unique

  @@map("categories")
}

model Brand {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  BannerImage Image[]   @relation("BrandBannerImage")
  brandImage  Image[]   @relation("BrandBrandImage")
  // @relation("BrandBrandImage",fields: [brandImageId], references: [id])  
  logoImage   Image?    @relation("BrandLogoImage", fields: [brandLogoId], references: [id])
  products    Product[] @relation("BrandProducts")
  // brandImageId       Int?  @unique
  brandLogoId Int?      @unique

  @@map("brands")
}

model Product {
  id              Int            @id @default(autoincrement())
  categoryId      Int?
  brandId         Int?
  gender          String?
  name            String
  description     String?
  price           Float
  prevprice       Float
  stock           Int
  images          Image[] // Relation to Image table  strapMaterial   String?
  dialShape       String?
  waterResistance String?
  size            String[] // Size of the product, applicable to clothing, footwear, etc.
  material        String? // Material of the product
  colour          String? // Colour of the product
  pattern         String? // Pattern of the product, e.g., Solid, Striped (Applicable to clothing)
  fit             String? // Fit of the product, e.g., Slim, Regular (Applicable to clothing)
  soleType        String? // Sole type, applicable to footwear
  closureType     String? // Closure type, applicable to footwear
  occasion        String? // Occasion, e.g., Wedding, Casual (Applicable to specialty and occasion wear)
  season          String? // Season, e.g., Summer, Winter (Applicable to seasonal wear)
  updatedAt       DateTime       @updatedAt
  createdAt       DateTime       @default(now())
  categoryType    CategoryType
  category        Category[]     @relation("CategoryProducts")
  brand           Brand?         @relation("BrandProducts", fields: [brandId], references: [id])
  orderItems      OrderItem[]    @relation("ProductOrderItems")
  reviews         Review[]       @relation("ProductReviews")
  wishlist        Wishlist[]
  cartItems       ShoppingCart[]

  @@map("products")
}

model Image {
  id               Int       @id @default(autoincrement())
  productId        Int?
  product          Product?  @relation(fields: [productId], references: [id])
  brandImage       Brand?    @relation("BrandBrandImage", fields: [brandId], references: [id])
  bannerImage      Brand?    @relation("BrandBannerImage", fields: [bannerImageId], references: [id])
  bannerImageId    Int?
  brandLogoUrl     Brand?    @relation("BrandLogoImage")
  category         Category?
  categorySample   Category?  @relation("categorySampleImage", fields: [categorySampleId], references: [id])
  categorySampleId Int?
  publicId         String
  url              String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  brandId          Int?      @unique

  @@map("product_images")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  paymentId   Int
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation("UserOrders", fields: [userId], references: [id])
  items       OrderItem[] @relation("OrderItems")
  payment     Payment?    @relation()
  shipping    Shipping?   @relation("OrderShipping")

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  order     Order    @relation("OrderItems", fields: [orderId], references: [id])
  product   Product  @relation("ProductOrderItems", fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id          Int           @id @default(autoincrement())
  orderId     Int           @unique
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  paymentDate DateTime      @default(now())
  order       Order         @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation("ProductReviews", fields: [productId], references: [id])
  user      User     @relation("UserReviews", fields: [userId], references: [id])

  @@map("reviews")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("wishlist")
}

model ShoppingCart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("shopping_cart")
}

model Shipping {
  id           Int            @id @default(autoincrement())
  orderId      Int            @unique
  address      String
  city         String
  state        String
  postalCode   String
  country      String
  status       ShippingStatus @default(PENDING)
  shippingDate DateTime?
  createdAt    DateTime       @default(now())
  order        Order          @relation("OrderShipping", fields: [orderId], references: [id])

  @@map("shipping")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum CategoryType {
  CLOTHING // For apparel such as shirts, trousers, dresses, etc.
  FOOTWEAR // For shoes, sandals, sneakers, etc.
  ACCESSORY // For belts, hats, scarves, etc.
  BAG // For handbags, backpacks, luggage, etc.
  JEWELLERY // For rings, necklaces, bracelets, etc.
  WATCH // For watches and timepieces
  SUNGLASSES // For eyewear, including sunglasses
  UNDERWEAR // For undergarments, lingerie, etc.
  SPORTSWEAR // For athletic clothing, gym wear, etc.
  OUTERWEAR // For jackets, coats, and other outerwear
  SWIMWEAR // For swimsuits, bikinis, etc.
  SUIT // For formal suits, blazers, etc.
  SLEEPWEAR // For pajamas, nightgowns, etc.
  COSTUME // For costumes, fancy dress, etc.
  LOUNGEWEAR // For comfortable, casual wear typically worn at home
  MATERNITY // For maternity wear
  LEATHER_GOODS // For wallets, belts, and other leather accessories
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
